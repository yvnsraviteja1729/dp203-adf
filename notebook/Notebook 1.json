{
	"name": "Notebook 1",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "pool1",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "b804f7b5-17a9-4427-9d8d-b0b9140504b2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/8f7ac065-9fb5-428e-afc3-96700169b56e/resourceGroups/rg-dp203-01/providers/Microsoft.Synapse/workspaces/sy-dp203-01/bigDataPools/pool1",
				"name": "pool1",
				"type": "Spark",
				"endpoint": "https://sy-dp203-01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/pool1",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\r\n",
					"df = spark.read.load('abfss://files@sayvnsdp20302.dfs.core.windows.net/csv/Log.csv', format='csv'\r\n",
					"# If header exists uncomment line below\r\n",
					", header=True\r\n",
					").withColumnRenamed('Opernation name','operation_name').withColumnRenamed('Event category','event_category').withColumnRenamed('Correlation id','Correlation_id'\r\n",
					").withColumnRenamed('Operation name','Operation_name').withColumnRenamed('Event initiated by','Event_initiated_by'\r\n",
					").withColumnRenamed('Resource type','Resource_type').withColumnRenamed('Resource group','Resource_group')\r\n",
					"display(df)"
				],
				"execution_count": 26
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from notebookutils import *\r\n",
					"\r\n",
					"display(mssparkutils.fs.ls(\"/\"))"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"print(df.columns)"
				],
				"execution_count": 20
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"delta_table_path = \"/delta/mydata\"\r\n",
					"df.write.format(\"delta\").mode(\"overwrite\").save(delta_table_path)"
				],
				"execution_count": 27
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from delta.tables import *\r\n",
					"from pyspark.sql.functions import *\r\n",
					"\r\n",
					"# Create a deltaTable object\r\n",
					"deltaTable = DeltaTable.forPath(spark, delta_table_path)\r\n",
					"\r\n",
					"\r\n",
					"deltaTable.update(condition = \"Status == 'Started'\",\r\n",
					"    set = { \"Status\": \"'Starting'\" })"
				],
				"execution_count": 29
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"deltaTable.history()"
				],
				"execution_count": 31
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}